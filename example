package main

import (
	"fmt"
	"bufio"
	"os"
	"log"
	"github.com/ishanjain28/perceptual-hash"
	"path"
)

func main() {
	firstImagePath := ""
	secondImagePath := ""

	fmt.Printf("Enter First Image Path: ")
	scanner := bufio.NewScanner(os.Stdin)

	for scanner.Scan() {
		s := scanner.Text()
		firstImagePath = s
		break
	}
	if err := scanner.Err(); err != nil {
		os.Exit(1)
	}
	fmt.Printf("Enter Second Image Path: ")

	for scanner.Scan() {
		s := scanner.Text()
		secondImagePath = s
		break
	}
	if err := scanner.Err(); err != nil {
		os.Exit(1)
	}

	firstImage, err := os.Open(firstImagePath)
	if err != nil {
		log.Fatalf("%s", err)
	}
	defer firstImage.Close()
	secondImage, err := os.Open(secondImagePath)
	if err != nil {
		log.Fatalf("%s", err)
	}
	defer secondImage.Close()
	firstDecodedImage, err := perceptual_hash.DecodeImage(firstImage, path.Ext(firstImagePath))
	secondDecodedImage, err := perceptual_hash.DecodeImage(secondImage, path.Ext(secondImagePath))

	firstGrayImage, _ := perceptual_hash.ConvertToGrayscale(firstDecodedImage), perceptual_hash.ConvertToGrayscale(secondDecodedImage)
	firstDownsizedImage := perceptual_hash.DownsizeImage(firstGrayImage)
	//secondDownsizedImage := perceptual_hash.DownsizeImage(secondGrayImage)
	fmt.Println(perceptual_hash.CalculateRowHash(firstDownsizedImage))
	//fmt.Println(perceptual_hash.CalculateRowHash(secondDownsizedImage))
	fmt.Println(perceptual_hash.CalculateColumnHash(firstDownsizedImage))
}
